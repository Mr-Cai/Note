从15年的Sky引擎发展到现在成熟的Flutter框架，这之间经历了多次升级换代改版，
在UI体验上有了很多提升，编译更快了，支持的系统更全面了，代码写起来更顺畅简洁了。
但是在开发过程中不免有太多麻烦，很难去避免，这是个痛点，接下来我会把自己的心得体验说出来。


Flutter有一些弊端，从15年Sky雏形引擎诞生到现在都没有彻底解决过，
官方插件的源码语言太老，大多还是OC和Java，显得很过时，不先进，就算是考虑到适配
旧版本平台，也不一定非得用旧语言，用新语言也不会影响什么，哪怕有什么bug，
也一定有解决的办法。只说明他们的开发团队老程序员居多。我相信未来也不会轻易去重构的，
因为代码量巨大，时间成本，技术成本也承担不起，反正能用就行了，里面塞了什么乱七八糟的，
谁管他，能用就行了，用户只看结果，过程是给幕后的程序员看的，他们心里苦说不出啊。
官方插件不仅旧，而且少，就那么几个，不增不减，更新也看不到什么变化。

除此之外，第三方插件代码不干净，原生平台API版本号有时需要手动修改，
不然和本地SDK版本不一致，很容易冲突，编译失败。你可能觉得不改也行，
那些编译警告什么的也不去管他，把精力集中在写代码上，这样的话，只是一种临时的妥协，
早晚要改的，这些不严重的BUG，也是BUG, 难道你看着不难受吗？除非你一直不升级，
所有插件版本都是固定下来的，我就不信你能坚持多久，你用别人开发的插件，不去升级适配，
开发者却在不停的升级，你为了临时妥协一下，因为升级会报错，所以就先不升级，管他呢，
先用着再说。国内开发者不少人都是这种思想。反正我忍不住，哪怕报错我也要根据插件更新文档和
源码仓库的疑难解答去修改错误，肯定是能解决的，放在那不动，早晚是个坑，小坑累积多了，
修复起来岂不是更耽误时间。

Flutter插件表面上是多平台同步的，宣传是说一套代码跨平台编译，听起来就像是写一份
代码就完了，什么都不用管了，多平台共用一套代码，所有平台都能运行一样的结果，
是这样的吗？理想丰满，现实骨感。
它的一套代码只是用来桥接的，真正用来编译的还是原生平台的SDK，用的还是原生平台的语言啊。
所以，一个插件支持的平台是有局限性的，必须得先用原生平台的语言调原生平台的第三方SDK，
写好后留个接口给Flutter框架去反射回调，没法一次全平台同步。我这么说听起来就跟React Native没多大区别了。
其实从本质上说，原理是一样的，都是反射回调。只是Flutter提前用Dart调用C++封装绘制一套基础UI库，写起来更方便
罢了。它的出现仅仅是为了统一跨平台框架，并没有取代原生语言的意思，也没法做到。
它能不能跨平台完全取决于原生语言的回调，不然跨不了的。
所以，同一个插件运行在不同系统是缺胳膊少腿的，不全面的。崩溃概率是极高的，甚至
很多插件只支持一个平台，那就相当于换了个语言写代码罢了。这就让跨平台显得大材小用了。
那怎么办啊？要么自己封装，要么等别人封装。有些时候可能得自己动手了，不会就多查资料。

记得以前腾讯装逼，在Flutter频道宣传自己的团队也用上了这个框架，那感觉就像一个山村老支书
对着村民说：俺们村终于通上电了，可喜可贺。那尕娃子，小妮子，赶紧杀头猪庆祝一下。
他们有人在短片里说：自从用了这个框架，咱腰也不酸，腿也不痛，也能下地干活了。
以前开发一个App要两个团队，现在一个团队就够了，一套代码同时编译两个平台，一样的结果。
说完镜头移到一个程序员写了个new，你当是Java啊，还用new，真是土鳖。

Flutter平台缺陷主要集中在插件依赖这块，我还有一些没说。
比如国内下载插件依赖，直接翻墙是不行的，需要再开一个代理软件实现系统全局翻墙，
这样命令就可以走代理了。不过最简单的是把插件仓库网址设置为国内镜像仓库，
这样不翻墙也能下载。不过自己上传插件可就没法传到镜像仓库了，没这个通道，
只能开代理软件让系统全局翻墙，普通的全局翻墙只是浏览器全局，目的是更稳定，不容易掉线。
这就恶心他妈开门了。该死的GFW，闭关锁国，一棒子打翻一船人。翻一遍墙还不够，还得翻两遍。


