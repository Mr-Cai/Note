从15年无人问津的Sky引擎发展到现在如火如荼成熟的Flutter框架，这之间经历了多次升级换代改版，
在UI体验上更现代更超前，编译速度更快了，支持的系统更全面了，代码写起来更加顺畅简洁了。
但是，在开发过程中不免会碰到麻烦，这是个痛点，接下来我会把自己的心得体验说出来。

Flutter有一些弊端，一直以来没法彻底的解决，
官方插件的源码使用的语言太老，大多还是OC和Java，显得很过时，不先进，就算是考虑到适配
旧版本平台，也不一定非得用旧语言，用新语言也不会影响什么，就算有什么bug，
也一定有解决的办法。从侧面说明他们的开发团队老程序员居多，为了稳定嘛。我相信未来也不会轻易去重构的，
因为代码量巨大，时间成本，技术成本也承担不起，反正能用就行了，里面塞了什么乱七八糟的，
我们也管不着，用户只看结果，开发者也是Flutter的用户，过程是给幕后的程序员看的，他们心中是苦是甜，只有他们自己心里最清楚
官方插件虽然不停地在更新，但用的语言都是老的，而且很少，一直以来不增不减，也看不出什么变化。

除此之外，第三方插件代码不干净，有时会和其他插件产生冲突，编译失败。可是不用那些插件又找不到合适的，没得选，不用也得用。搜不到解决方案只能去仓库提issue，这就很烦人了。
Flutter插件表面上是多平台同步的，宣传是说一套代码跨平台编译，
听起来很像95年Java：一次编写，到处运行
但并不是说写一份代码就完了，什么都不用管了，多平台共用一套代码，所有平台都能运行一样的结果，是这样的吗？理想丰满，现实骨感。
它的一套代码只是用来桥接的，真正用来编译的还是原生平台的SDK，用的还是原生平台的语言啊。

所以呢，插件脱离不了原生平台。一个插件支持的平台是有局限性的，
必须得先用原生开发语言调用对应的第三方库，暴露一些接口给Flutter框架去反射回调，
没法一次全平台同步。全平台不只是手机系统，桌面端和网页端都得运行一样的结果，
这样的全平台插件开发起来要会的东西可多了，可不是光用Dart就能写出来的。
桌面端和网页端适配是个大坑，先说桌面端的毛病，第一次跑Demo是很费劲的，
不同的系统需要安装对应的原生平台SDK，开发windows软件得下载10个G左右。
在linux上开发还得装c++编译器等繁琐操作, mac系统稍微轻松点，但也还得适配。
手机上能运行的效果，在桌面上是没法直接运行的，
除非没有任何第三方插件，因为除默认配置以外的依赖包很多是没有适配桌面端的。
网页端也一样，很多插件不支持网页，浏览器是一直报错的，在插件没适配网页端之前，是没法运行出来的。
用flutter写的代码只是个桥梁，现在光有桥梁可不行，桥梁对岸的终点得有啊，现在桥的终点是空的，那就
走不通啊。

我这么说听起来就跟React Native没多大区别了。
其实从本质上说，原理是一样的，都是反射回调。只是Flutter提前用Dart调用C++绘制并封装一套基础UI库，
写起来更方便罢了。它的出现仅仅是为了统一跨平台框架，并没有取代原生语言的意思，也没法做到。
它能不能跨平台完全取决于和原生语言之间的回调，不然跨不了的。
所以，同一个插件编译打包在不同系统上是缺胳膊少腿的，不全面的。崩溃概率是极高的，甚至
很多插件只支持一个平台，那就相当于换了个语言写代码罢了。这就让跨平台显得大材小用了。
那怎么办啊？要么自己封装，要么等别人封装。有些时候可能得自己动手了，不会就多查资料。

记得以前腾讯装逼，在Flutter频道宣传自己的团队也用上了这个框架，那感觉就像一个山村老支书
对着村民说：俺们村终于通上电了，可喜可贺。那尕娃子，小妮子，赶紧杀头猪庆祝一下。
他们有人在短片里说：自从用了这个框架，咱腰也不酸，腿也不痛，也能下地干活了。
以前开发一个App要两个团队，现在一个团队就够了，一套代码同时编译两个平台，一样的结果。
说完镜头移到一个程序员写了个new，你当是Java啊，还用new，真是土鳖。

Flutter平台缺陷主要集中在插件依赖这块，我还有一些没说。
比如国内下载插件依赖，直接翻墙是不行的，需要走系统级全局代理，
不过最简单的是把插件仓库网址设置为国内镜像仓库，
这样不翻墙也能下载。但是自己上传插件可就没法传到镜像仓库了，没这个通道，
只能传到官方仓库，在国内需要让终端命令全局翻墙，一般翻墙软件只是让浏览器全局，
系统级翻墙还得走两遍代理。再开一个代理软件。
这就恶心他妈开门了。该死的GFW，闭关锁国，一棒子打翻一船人。翻一遍墙还不够，还得翻两遍。

除此之外，热重载也是个噱头，实时编译是跨平台中很强大的特性，原本是为了省时间减少重复编译。
隔壁都下班了，你还在等编译呢，这肯定很难受。表面上看，热重载不用重复安装了，现实中不是这样的。
热重载仅支持调试版打包，而且是临时的，重开app就失效了。这倒不是重点，主要是偶尔会掉线
即使连接设备稳定的情况下，也会失效，无论是用命令还是点按钮都没反应。最后只能用原生IDE重新打包。
它和正式版的编译结果有些许差异，还是得重复安装去修改。所以省时间也是局限性的，并不是所有情况都适合热重载。

就这？还有别的吗？我个人觉得比较坑的缺点是有时需要手动修改源码，
比如Android API版本差异大，有的插件兼容更高版本，有点兼容更低版本。
如果你的app需要适配低版本的，就得统一所有插件的最低支持，那么就得修改源码，
可不仅仅是改个数字，还要根据编译日志、运行日志修改弃用的方法，有的好改，有的难改，
改不了只能放那。每次运行都会看到弃用提示，很烦的。你说改完之后备份一下行吧，
没这个必要，插件更新很快的，你现在改好了，下一个版本可能连这个文件都没了。

那不升级总行了吧，
可以啊，可是早晚你会收到提示要升级的。这是没法睁一只眼闭一只眼的。你可能觉得不改也行，
那些编译警告什么的不去管他，把精力集中在写代码上，这样的话，只是一种临时的妥协，
早晚要改的，这些不严重的BUG，也是BUG, 难道你看着不难受吗？除非你一直不升级，
所有插件版本都是固定下来的，我就不信你能坚持多久，你用别人开发的插件，不去升级适配，
开发作者却在不停的升级，你为了临时妥协一下，担心一升级就报错，先放着，用着再说。
国内开发者不少人都是这种思想。反正我忍不住，哪怕报错我也要根据插件更新文档和
源码仓库的疑难解答去修改错误，肯定是能解决的，放在那不动，早晚是个坑，小坑累积多了，
修复起来岂不是更耽误时间。

不存在完美的框架，只有改不完的Bug，不过每修复一个BUG，框架都会变得越来越完美。
我相信未来会有新的框架取代Flutter，但近些年它是王者，只能用它，其他的跨平台框架渐渐的都被淘汰了。
Flutter在代码写法上也是有争议的，就比如变量类型和范型，过去的写法是推荐全部加上的，
写的可读性越强越清晰越好，写多了会很啰嗦，所以新版的写法是默认推荐省略范型的，
变量也是推荐隐式声明的。这会让老程序员和小程序员合作困难，解决方案就是两者折衷，
中和一下，有些地方要详细，有些地方要省略，详略得当。
咱也不用说太多，先用着再说嘛，没得选，其他的框架渐渐都被取代了，竞争很激烈，
也是没得办法。我相信Flutter会越来越强大的。 